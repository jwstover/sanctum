defmodule Sanctum.Repo.Migrations.AddDecksAndGames do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:games, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true

      add :hero_id,
          references(:cards,
            column: :id,
            name: "games_hero_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :villain_id,
          references(:cards,
            column: :id,
            name: "games_villain_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :main_scheme_id,
          references(:cards,
            column: :id,
            name: "games_main_scheme_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:decks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :title, :text
      add :mcdb_id, :text

      add :hero_code,
          references(:cards,
            column: :code,
            name: "decks_hero_code_fkey",
            type: :text,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:decks, [:mcdb_id], name: "decks_unique_mcdb_id_index")

    create table(:deck_cards, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true

      add :card_id,
          references(:cards,
            column: :id,
            name: "deck_cards_card_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :deck_id,
          references(:decks,
            column: :id,
            name: "deck_cards_deck_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end
  end

  def down do
    drop constraint(:deck_cards, "deck_cards_card_id_fkey")

    drop constraint(:deck_cards, "deck_cards_deck_id_fkey")

    drop table(:deck_cards)

    drop_if_exists unique_index(:decks, [:mcdb_id], name: "decks_unique_mcdb_id_index")

    drop constraint(:decks, "decks_hero_code_fkey")

    drop table(:decks)

    drop constraint(:games, "games_hero_id_fkey")

    drop constraint(:games, "games_villain_id_fkey")

    drop constraint(:games, "games_main_scheme_id_fkey")

    drop table(:games)
  end
end
